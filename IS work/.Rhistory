labs(title="Proportion that Return to a Shelter within 12 Months Given Family Status and Case Manager Type",
y = "Proportion",
x="Case Manager Type",
fill = "Return to Shelter")
shelter_data2 <- subset(shelter, (DomesticViolenceVictim != 9))
shelter_data2$DomesticViolenceVictim <- if(shelter$DomesticViolenceVictim == 1){
shelter_data2$DomesticViolenceVictim <= "None"
}
shelter_data2
View(shelter_data2)
View(shelter_data2)
shelter_data2$DomesticViolenceVictim[shelter_data2$DomesticViolenceVictim == 1,] <- "None"
shelter_data2$DomesticViolenceVictim[shelter_data2$DomesticViolenceVictim == 1] <- "None"
ggplot(shelter, aes(x = CaseManagerType, fill = ReturnToShelter_12Months)) +
geom_bar(position="fill") +
facet_wrap(~ FamilyStatus) +
scale_fill_manual(values = c("#b2df8a", "#33a02c")) +
labs(title="Proportion that Return to a Shelter within 12 Months Given Family Status and Case Manager Type",
y = "Proportion",
x="Case Manager Type",
fill = "Return to Shelter")
shelter_data2 <- subset(shelter, (DomesticViolenceVictim != 9))
shelter_data2$DomesticViolenceVictim[shelter_data2$DomesticViolenceVictim == 1] <- "None"
shelter_data2$DomesticViolenceVictim[shelter_data2$DomesticViolenceVictim == 2] <- "< than 6 months"
shelter_data2$DomesticViolenceVictim[shelter_data2$DomesticViolenceVictim == 3] <- "> than 6 months"
ggplot(shelter_data2, aes(x = DomesticViolenceVictim, fill = CaseManagerType)) +
geom_bar(position = "fill") +
labs(title = "Domestic Violence Victim by Case Manager Type",
x = "Domestic Violence Victim",
y = "Proportion",
fill = "Case Manager Type") +
scale_fill_manual(values = c("#a6cee3", "#1f78b4")) +
theme(text = element_text(size = 15), plot.title = element_text(size = 15))
ggplot(shelter, aes(x = CaseManagerType, fill = ReturnToShelter_12Months)) +
geom_bar(position="fill") +
facet_wrap(~ FamilyStatus) +
scale_fill_manual(values = c("#b2df8a", "#33a02c")) +
labs(title="Proportion that Return to a Shelter within 12 Months Given Family Status and Case Manager Type",
y = "Proportion",
x="Case Manager Type",
fill = "Return to Shelter")
shelter_data2 <- subset(shelter, (DomesticViolenceVictim != 9))
shelter_data2$DomesticViolenceVictim[shelter_data2$DomesticViolenceVictim == 1] <- "Never"
shelter_data2$DomesticViolenceVictim[shelter_data2$DomesticViolenceVictim == 2] <- "<than 6 months"
shelter_data2$DomesticViolenceVictim[shelter_data2$DomesticViolenceVictim == 3] <- ">than 6 months"
ggplot(shelter_data2, aes(x = DomesticViolenceVictim, fill = CaseManagerType)) +
geom_bar(position = "fill") +
labs(title = "Domestic Violence Victim by Case Manager Type",
x = "Domestic Violence Victim",
y = "Proportion",
fill = "Case Manager Type") +
scale_fill_manual(values = c("#a6cee3", "#1f78b4")) +
theme(text = element_text(size = 15), plot.title = element_text(size = 15))
library(ggplot2)
library(readr)
library(dplyr)
# Only use the June 2016 subset
bike <- read_csv("https://github.com/mateyneykov/315_code_data/raw/master/data/nyc-citi-bike-data-subset.csv")
#  Add start_date variable
bike <- mutate(bike,
start_date = as.Date(starttime, format = "%m/%d/%Y"))
head(bike)
min(bike$start_date)
max(bike$start_date)
library(ggplot2)
library(readr)
library(dplyr)
# Only use the June 2016 subset
bike <- read_csv("https://github.com/mateyneykov/315_code_data/raw/master/data/nyc-citi-bike-data-subset.csv")
#  Add start_date variable
bike <- mutate(bike,
start_date = as.Date(starttime, format = "%m/%d/%Y"))
head(bike)
min(bike$start_date)
max(bike$start_date)
#  Summarize bike, creating a new data.frame that includes the number
#  of trips taken on each day
trips_per_day <- bike %>%
group_by(start_date) %>%
summarize(n_trips = n())
#  Create a time series plot with the dates on the x-axis and the number of
#  trips per day on the y-axis
ggplot(trips_per_day, aes(x = start_date, y = n_trips)) +
geom_line() +
scale_x_date() +
labs(title = "Number of Trips Depending on the Date",
x = "Date",
y = "Number of tips") +
scale_x_date(date_breaks = "1 week", date_labels = "%b %d") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#  Summarize bike, creating a new data.frame that includes the number
#  of trips taken on each day, split by usertype
trips_per_day_usertype <- bike %>%
group_by(start_date, usertype) %>%
summarize(n_trips = n())
#  Create a time series plot with the dates on the x-axis and the number of
#  trips per day on the y-axis, split by usertype
ggplot(trips_per_day_usertype, aes(x = start_date, y = n_trips, color = usertype)) +
geom_line() +
scale_x_date() +
labs(title = "Number of Trips Depending on the Date",
x = "Date",
y = "Number of tips",
color = "User Type") +
scale_x_date(date_breaks = "1 week", date_labels = "%b %d") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggseas)
ggplot(trips_per_day_usertype, aes(x = start_date, y = n_trips, color = usertype)) +
geom_line() +
scale_x_date() +
stat_rollapplyr() +
labs(title = "Number of Trips Depending on the Date",
x = "Date",
y = "Number of tips",
color = "User Type") +
scale_x_date(date_breaks = "1 week", date_labels = "%b %d") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggseas)
ggplot(trips_per_day_usertype, aes(x = start_date, y = n_trips, color = usertype)) +
geom_line() +
scale_x_date() +
stat_rollapplyr(width = 7, align = "right", size = 2) +
labs(title = "Number of Trips Depending on the Date",
x = "Date",
y = "Number of tips",
color = "User Type") +
scale_x_date(date_breaks = "1 week", date_labels = "%b %d") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggseas)
ggplot(trips_per_day_usertype, aes(x = start_date, y = n_trips, color = usertype)) +
geom_line() +
scale_x_date() +
stat_rollapplyr(width = 7, align = "right", size = 1) +
labs(title = "Number of Trips Depending on the Date",
x = "Date",
y = "Number of tips",
color = "User Type") +
scale_x_date(date_breaks = "1 week", date_labels = "%b %d") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggseas)
ggplot(trips_per_day_usertype, aes(x = start_date, y = n_trips, color = usertype)) +
geom_line() +
scale_x_date() +
stat_rollapplyr(width = 7, align = "right", size = 2) +
labs(title = "Number of Trips Depending on the Date",
x = "Date",
y = "Number of tips",
color = "User Type") +
scale_x_date(date_breaks = "1 week", date_labels = "%b %d") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
rand_ts <- rnorm(1000)
acf(rand_ts, plot = FALSE)
acf(rand_ts, plot = TRUE)
bike_customer_acf <- acf(filter(trips_per_day_usertype,
usertype == "Customer")$n_trips,
plot = FALSE)
bike_subsciber_acf <- acf(filter(trips_per_day_usertype,
usertype == "Subscriber")$n_trips,
plot = FALSE)
bike_customer_acf_df <- with(bike_customer_acf, data.frame(lag,acf))
ggplot(bike_customer_acf_df, aes(x = lag, y= acf)) + geom_col()
bike_customer_acf <- acf(filter(trips_per_day_usertype,
usertype == "Customer")$n_trips,
plot = FALSE)
bike_subscriber_acf <- acf(filter(trips_per_day_usertype,
usertype == "Subscriber")$n_trips,
plot = FALSE)
bike_customer_acf_df <- with(bike_customer_acf, data.frame(lag,acf))
bike_subscriber_acf_df <- with(bike_subscriber_acf, data.frame(lag,acf))
customer_plot <- ggplot(bike_customer_acf_df, aes(x = lag, y= acf)) +
geom_col()
subscriber_plot <- ggplot(bike_subscriber_acf_df, aes(x = lag, y= acf)) +
geom_col()
bike_customer_acf_df <- with(bike_customer_acf, data.frame(lag,acf))
bike_subscriber_acf_df <- with(bike_subscriber_acf, data.frame(lag,acf))
customer_plot <- ggplot(bike_customer_acf_df, aes(x = lag, y= acf)) +
geom_col()
subscriber_plot <- ggplot(bike_subscriber_acf_df, aes(x = lag, y= acf)) +
geom_col()
grid.arrange(customer_plot, subscriber_plot, nrow = 1)
library(gridExtra)
bike_customer_acf_df <- with(bike_customer_acf, data.frame(lag,acf))
bike_subscriber_acf_df <- with(bike_subscriber_acf, data.frame(lag,acf))
customer_plot <- ggplot(bike_customer_acf_df, aes(x = lag, y= acf)) +
geom_col()
subscriber_plot <- ggplot(bike_subscriber_acf_df, aes(x = lag, y= acf)) +
geom_col()
grid.arrange(customer_plot, subscriber_plot, ncol = 2)
library(gridExtra)
bike_customer_acf_df <- with(bike_customer_acf, data.frame(lag,acf))
bike_subscriber_acf_df <- with(bike_subscriber_acf, data.frame(lag,acf))
customer_plot <- ggplot(bike_customer_acf_df, aes(x = lag, y= acf)) +
geom_col() +
labs(title = "Customer Auto Correlation by Lag",
x = "Lag",
y = "Auto Correlation")
subscriber_plot <- ggplot(bike_subscriber_acf_df, aes(x = lag, y= acf)) +
geom_col() +
labs(title = "Subscriber Auto Correlation by Lag",
x = "Lag",
y = "Auto Correlation")
grid.arrange(customer_plot, subscriber_plot, ncol = 2)
library(gridExtra)
bike_customer_acf_df <- with(bike_customer_acf, data.frame(lag,acf))
bike_subscriber_acf_df <- with(bike_subscriber_acf, data.frame(lag,acf))
customer_plot <- ggplot(bike_customer_acf_df, aes(x = lag, y= acf)) +
geom_col() +
labs(title = "Customer Auto Correlation by Lag",
x = "Lag",
y = "Auto Correlation",
caption = "Source: NYC City Bike")
library(ggplot2)
library(readr)
library(dplyr)
# Only use the June 2016 subset
bike <- read_csv("https://github.com/mateyneykov/315_code_data/raw/master/data/nyc-citi-bike-data-subset.csv")
#  Add start_date variable
bike <- mutate(bike,
start_date = as.Date(starttime, format = "%m/%d/%Y"))
head(bike)
min(bike$start_date)
max(bike$start_date)
#  Summarize bike, creating a new data.frame that includes the number
#  of trips taken on each day
trips_per_day <- bike %>%
group_by(start_date) %>%
summarize(n_trips = n())
#  Create a time series plot with the dates on the x-axis and the number of
#  trips per day on the y-axis
ggplot(trips_per_day, aes(x = start_date, y = n_trips)) +
geom_line() +
scale_x_date() +
labs(title = "Number of Trips Depending on the Date",
x = "Date",
y = "Number of tips") +
scale_x_date(date_breaks = "1 week", date_labels = "%b %d") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#  Summarize bike, creating a new data.frame that includes the number
#  of trips taken on each day, split by usertype
trips_per_day_usertype <- bike %>%
group_by(start_date, usertype) %>%
summarize(n_trips = n())
#  Create a time series plot with the dates on the x-axis and the number of
#  trips per day on the y-axis, split by usertype
ggplot(trips_per_day_usertype, aes(x = start_date, y = n_trips, color = usertype)) +
geom_line() +
scale_x_date() +
labs(title = "Number of Trips Depending on the Date",
x = "Date",
y = "Number of tips",
color = "User Type") +
scale_x_date(date_breaks = "1 week", date_labels = "%b %d") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggseas)
ggplot(trips_per_day_usertype, aes(x = start_date, y = n_trips, color = usertype)) +
geom_line() +
scale_x_date() +
stat_rollapplyr(width = 7, align = "right", size = 2) +
labs(title = "Number of Trips Depending on the Date",
x = "Date",
y = "Number of tips",
color = "User Type") +
scale_x_date(date_breaks = "1 week", date_labels = "%b %d") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
rand_ts <- rnorm(1000)
acf(rand_ts, plot = FALSE)
acf(rand_ts, plot = TRUE)
bike_customer_acf <- acf(filter(trips_per_day_usertype,
usertype == "Customer")$n_trips,
plot = FALSE)
bike_subscriber_acf <- acf(filter(trips_per_day_usertype,
usertype == "Subscriber")$n_trips,
plot = FALSE)
library(gridExtra)
bike_customer_acf_df <- with(bike_customer_acf, data.frame(lag,acf))
bike_subscriber_acf_df <- with(bike_subscriber_acf, data.frame(lag,acf))
customer_plot <- ggplot(bike_customer_acf_df, aes(x = lag, y= acf)) +
geom_col() +
labs(title = "Customer Auto Correlation by Lag",
x = "Lag",
y = "Auto Correlation",
caption = "Source: NYC City Bike")
subscriber_plot <- ggplot(bike_subscriber_acf_df, aes(x = lag, y= acf)) +
geom_col() +
labs(title = "Subscriber Auto Correlation by Lag",
x = "Lag",
y = "Auto Correlation",
caption = "Source: NYC City Bike")
grid.arrange(customer_plot, subscriber_plot, ncol = 2)
library(ggplot2)
library(plotly)
my.df <- data.frame(x = runif(30))
my.df$y <- 3 + 2*my.df$x + rnorm(30)
p1 <- ggplot(my.df, aes(x, y)) + geom_point()
p1
ggplotly(p1)
library(rsconnect)
rsconnect::setAccountInfo(name='sc326stats',
token='FD1B534C4065C3269A91B5299E3E7B8E',
secret='lcghg86wQvbinY3KsrxdOqFnLjlgTel9rwAeenM0')
library(shiny)
runApp()
library(shiny); runApp('Desktop/SC326/final project/working.R')
library(shiny); runApp('Desktop/SC326/final project/working.R')
runApp('Desktop/SC326/final project/working.R')
library(shiny); runApp('Desktop/SC326/final project/working.R')
runApp('Desktop/Independent Study')
runApp('Desktop/Independent Study')
runApp('Desktop/Independent Study')
runApp('Desktop/Independent Study')
runApp('Desktop/Independent Study')
runApp('Desktop/Independent Study')
runApp('Desktop/Independent Study')
runApp('Desktop/Independent Study')
runApp('Desktop/Independent Study')
shiny::runApp('Desktop/Independent Study')
library(shiny)
library(plotly)
library(ggplot2)
library(readr)
library(dplyr)
crunch_data <- read.csv("trial.csv")
library(shiny)
library(plotly)
library(ggplot2)
library(readr)
library(dplyr)
crunch_data <- read.csv("trial.csv")
crunch_data
crunch_data$averageAmountOfInvestors <- crunch_data$Total.Funding.Amount.Currency..in.USD. / crunch_data$Number.of.Investors
crunch_data
crunch_data$averageAmountOfMoneyByInvestors <- crunch_data$Total.Funding.Amount.Currency..in.USD. / crunch_data$Number.of.Investors
crunch_data
boxplot(crunch_data$Organization.Name, crunch_data$averageAmountOfMoneyByInvestors)
boxplot(crunch_data$averageAmountOfMoneyByInvestors)
barplot(crunch_data$Organization.Name, crunch_data$averageAmountOfMoneyByInvestors)
barplot(crunch_data$averageAmountOfMoneyByInvestors)
ggplot(crunch_data, aes(x = crunch_data$Organization.Name)) +
geom_bar() +
labs(title = "IPO Status",
x = "Status",
y = "Count")
ggplot(crunch_data, aes(x = crunch_data$Organization.Name, y = crunch_data$averageAmountOfMoneyByInvestors)) +
geom_bar() +
labs(title = "IPO Status",
x = "Status",
y = "Count")
ggplot(crunch_data, aes(x = crunch_data$averageAmountOfMoneyByInvestors)) +
geom_bar() +
labs(title = "IPO Status",
x = "Status",
y = "Count")
ggplot(crunch_data, aes(x = Organization.Name, y = averageAmountOfMoneyByInvestors)) +
geom_col() +
labs(title = "IPO Status",
x = "Status",
y = "Count")
ggplot(crunch_data, aes(x = Organization.Name, y = averageAmountOfMoneyByInvestors)) +
geom_col() +
labs(title = "IPO Status",
x = "ORganization Name",
y = "$$")
ggplot(crunch_data, aes(x = Organization.Name, y = averageAmountOfMoneyByInvestors)) +
geom_col() +
labs(title = "Average Amount of Money Invested By the Amount of Investors",
x = "ORganization Name",
y = "$$")
ggplot(crunch_data, aes(x = Organization.Name, y = averageAmountOfMoneyByInvestors)) +
geom_col() +
labs(title = "Average Amount of Money Invested By the Amount of Investors",
x = "Organization Name",
y = "$$")
ggplot(crunch_data[0:10], aes(x = Organization.Name, y = averageAmountOfMoneyByInvestors)) +
geom_col() +
labs(title = "Average Amount of Money Invested By the Amount of Investors",
x = "Organization Name",
y = "$$")
ggplot(crunch_data[1:10], aes(x = Organization.Name, y = averageAmountOfMoneyByInvestors)) +
geom_col() +
labs(title = "Average Amount of Money Invested By the Amount of Investors",
x = "Organization Name",
y = "$$")
runApp('Desktop/Independent Study')
runApp('Desktop/Independent Study')
shiny::runApp('Desktop/Independent Study')
shiny::runApp('Desktop/Independent Study')
fig <- plot_ly(data = crunch_data, x = log(averageAmountOfMoneyByInvestors), type = "histogram")
fig <- plot_ly(data = crunch_data, x = log(crunch_data$averageAmountOfMoneyByInvestors), type = "histogram")
fig
fig <- plot_ly(x = log(crunch_data$averageAmountOfMoneyByInvestors), type = "histogram")
fig
fig <- plot_ly(x = crunch_data$averageAmountOfMoneyByInvestors, type = "histogram")
fig
fig <- plot_ly(y=averageAmountOfMoneyByInvestors, x=Organization.Name, histfunc='sum', type = "histogram")
fig <- plot_ly(y= crunch_data$averageAmountOfMoneyByInvestors, x= crunch$dataOrganization.Name, histfunc='sum', type = "histogram")
fig <- plot_ly(y= crunch_data$averageAmountOfMoneyByInvestors, x= crunch_data$Organization.Name, histfunc='sum', type = "histogram")
fig <- fig %>% layout(yaxis=list(type='linear'))
fig
fig <- plot_ly(y= crunch_data$averageAmountOfMoneyByInvestors, x= crunch_data$Organization.Name, type = "histogram")
fig <- fig %>% layout(yaxis=list(type='linear'))
fig
fig <- plot_ly(y= log(crunch_data$averageAmountOfMoneyByInvestors), x= crunch_data$Organization.Name, type = "histogram")
fig <- fig %>% layout(yaxis=list(type='linear'))
fig
fig <- plot_ly(y= crunch_data$averageAmountOfMoneyByInvestors, x= crunch_data$Organization.Name, type = "histogram")
fig <- fig %>% layout(yaxis=list(type='linear'))
fig
fig <- plot_ly(y= crunch_data$averageAmountOfMoneyByInvestors, x= crunch_data$Organization.Name, type = "histogram")
fig <- fig %>% layout(yaxis=list)
fig
fig <- plot_ly(y= crunch_data$averageAmountOfMoneyByInvestors, x= crunch_data$Organization.Name, type = "histogram")
fig <- fig %>% layout(yaxis=list(type='linear'))
fig
fig <- plot_ly(y= log(crunch_data$averageAmountOfMoneyByInvestors), x= crunch_data$Organization.Name, type = "histogram")
fig <- fig %>% layout(yaxis=list(type='linear'))
fig
runApp('Desktop/Independent Study')
fig <- plot_ly(y= log(crunch_data$averageAmountOfMoneyByInvestors), x= crunch_data$Organization.Name, type = "histogram")
fig <- fig %>% layout(yaxis=list(type='linear', title = "Money"))
fig
fig <- plot_ly(y= log(crunch_data$averageAmountOfMoneyByInvestors), x= crunch_data$Organization.Name, type = "histogram")
fig <- fig %>% layout(yaxis=list(type='linear'))
fig
fig <- plot_ly(y= log(crunch_data$averageAmountOfMoneyByInvestors), x= crunch_data$Organization.Name, type = "histogram")
fig <- fig %>% layout(yaxis=list(title = "Money"))
fig
fig <- plot_ly(y= log(crunch_data$averageAmountOfMoneyByInvestors), x= crunch_data$Organization.Name, type = "histogram")
fig <- fig %>% layout(yaxis=list(title = "Money (In Billions)"))
fig
Twitter <- crunch_data$Organization.Name == "Twitter"
fig <- plot_ly(y= crunch_data$averageAmountOfMoneyByInvestors, x= Twitter, type = "histogram")
fig <- fig %>% layout(yaxis=list(title = "Money (In Billions)"))
fig
Twitter <- crunch_data$Organization.Name == "Twitter"
fig <- plot_ly(y= crunch_data$averageAmountOfMoneyByInvestors, x= Twitter, type = "histogram")
fig
fig <- plot_ly(y= crunch_data$averageAmountOfMoneyByInvestors, x= crunch_data$Organization.Name["Twitter"], type = "histogram")
fig <- fig %>% layout(yaxis=list(title = "Money (In Billions)"))
fig
fig <- plot_ly(y= crunch_data$averageAmountOfMoneyByInvestors, x= crunch_data$Organization.Name["Twitter"], type = "histogram")
fig <- fig %>% layout(yaxis=list(title = "Money (In Billions)"))
fig
import plotly.express as px
library(plotly.express)
install.packages(plotly.express)
fig <- plot_ly(y= log(crunch_data$averageAmountOfMoneyByInvestors), x= crunch_data$Organization.Name, type = "bar")
fig <- fig %>% layout(yaxis=list(title = "Money (In Billions)"))
fig
fig <- plot_ly(y= crunch_data$averageAmountOfMoneyByInvestors, x= crunch_data$Organization.Name, type = "bar")
fig <- fig %>% layout(yaxis=list(title = "Money (In Billions)"))
fig
fig <- plot_ly(y= crunch_data$averageAmountOfMoneyByInvestors, x= crunch_data$Organization.Name["Twitter"], type = "bar")
fig <- fig %>% layout(yaxis=list(title = "Money (In Billions)"))
fig
fig <- plot_ly(y= crunch_data$averageAmountOfMoneyByInvestors, x= crunch_data$Organization.Name, type = "bar")
fig <- fig %>% layout(yaxis=list(title = "Money (In Billions)"))
fig
fig <- plot_ly(x = log(crunch_data$averageAmountOfMoneyByInvestors), type = "bar")
fig
fig <- plot_ly(x = log(crunch_data$averageAmountOfMoneyByInvestors), type = "histogram")
fig
fig <- plot_ly(data = crunch_data, x = ~crunch_data$Organization.Name, y = ~crunch_data$averageAmountOfMoneyByInvestors, text = ~paste("Organization Name: ", Organization.Name))
fig <- fig %>% layout(yaxis = list(title = "Average Percent Increase in Wage"), xaxis = list(title = 'Average Days in the Shelter'))
fig
fig <- plot_ly(data = crunch_data, x = ~crunch_data$Organization.Name, y = ~log(crunch_data$averageAmountOfMoneyByInvestors), text = ~paste("Organization Name: ", Organization.Name))
fig <- fig %>% layout(yaxis = list(title = "Average Percent Increase in Wage"), xaxis = list(title = 'Average Days in the Shelter'))
fig
fig <- plot_ly(data = crunch_data, x = ~crunch_data$Organization.Name, y = ~crunch_data$averageAmountOfMoneyByInvestors, text = ~paste("Organization Name: ", Organization.Name))
fig <- fig %>% layout(yaxis = list(title = "Average Percent Increase in Wage"), xaxis = list(title = 'Average Days in the Shelter'))
fig
fig <- plot_ly(data = crunch_data, x = ~crunch_data$Organization.Name, y = ~crunch_data$averageAmountOfMoneyByInvestors, text = ~paste("Organization Name: ", Organization.Name))
fig <- fig %>% layout(yaxis = list(title = "average Amount Of Money By Investors"), xaxis = list(title = 'Organization Name'))
fig
library(readr)
trial <- read_csv("Desktop/Independent Study/trial plots/trial.csv")
View(trial)
hud_data2 <- read.csv("trial.csv")
runApp('Desktop/Independent Study/firstPlot.R')
runApp('Desktop/Independent Study/firstPlot.R')
runApp('Desktop/Independent Study')
runApp('Desktop/Independent Study/firstPlot.R')
runApp('Desktop/Independent Study/firstPlot.R')
runApp('Desktop/Independent Study/firstPlot.R')
runApp('Desktop/Independent Study/firstPlot.R')
runApp('Desktop/Independent Study/firstPlot.R')
runApp('Desktop/Independent Study/firstPlot.R')
runApp('Desktop/Independent Study/firstPlot.R')
runApp('Desktop/Independent Study/firstPlot.R')
fig <- plot_ly(data = crunch_data, x = ~crunch_data$Organization.Name, y = ~crunch_data$averageAmountOfMoneyByInvestors, text = ~paste("Last Funding Type: ", Last.Funding.Type))
fig <- fig %>% layout(yaxis = list(title = "average Amount Of Money By Investors"), xaxis = list(title = 'Organization Name'))
fig
fig <- plot_ly(data = crunch_data, x = ~crunch_data$Organization.Name, y = ~crunch_data$averageAmountOfMoneyByInvestors, text = ~paste("Last Funding Type:", Last.Funding.Type))
fig <- fig %>% layout(yaxis = list(title = "average Amount Of Money By Investors"), xaxis = list(title = 'Organization Name'))
fig
runApp('Desktop/Independent Study/firstPlot.R')
library(shiny); runApp('Desktop/Independent Study/backup.R')
library(shiny); runApp('Desktop/Independent Study/backup.R')
runApp('Desktop/Independent Study/firstPlot.R')
runApp('Desktop/Independent Study/firstPlot.R')
runApp('Desktop/Independent Study/firstPlot.R')
runApp('Desktop/Independent Study/firstPlot.R')
text = ~paste("Last Funding Type:", Last.Funding.Type)
hud_data2 <- read.csv("trial.csv")
setwd("~/Desktop/Independent Study")
hud_data2 <- read.csv("trial.csv")
View(hud_data2)
runApp('firstPlot.R')
runApp('firstPlot.R')
View(hud_data2)
ggplot(crunch_data, aes(x = log(averageAmountOfMoneyByInvestors))) +
geom_histogram(bins= 30) +
geom_vline(xintercept = 15)
